public class Graph {
    public static void main(String[] args) {
        / Строим матрицу смежности графа и указываем длину всех дуг /

        /
         * Wj = Wk + xk - lkj * g, где
         * Wk - начальное количество топлива в баке в начале маршрута из точки k в точку
         * j;
         * xk - количество заправленного топлива в точке `k`
         * lkj - длина участка (k, j) ∈ E;
         * g – удельный расход топлива;
         * phi - количество полученного топлива в точке j.
         /

        double phi;

        int n = 9; // Количество вершин графа
        int m = 8; // Количество ребер графа

        int[] a = new int[] { 0, 0, 1, 2, 3, 3, 4, 5, 6 }; // откуда
        int[] b = new int[] { 1, 2, 3, 4, 5, 6, 6, 7, 7 }; // куда
        int[] l = new int[] { 20, 35, 55, 70, 60, 40, 100, 80, 30 }; // длина

        int[] xk = new int[] { 5, 5, 1, 2, 5, 3, 10, 10, 15 }; // заправленное топливо в точках
        double[] p = new double[] { 55, 55, 49.1, 61, 50, 49, 53, 52.5, 51 }; // цена за 1 литр 
        double g = 0.1; // средний расход в литрах на 1 км, если 10л на 100км
        double[] w = new double[10]; // кол-во горючего в баке на предыщуй точке
        double[][] S = new double[10][10]; // общая сумма затраченного горючего при движении

        System.out.println("\nИмеем алгоритм:");
        // Алгоритм из 0 в N
        for (int d = 0; d < n; d++) {
            if (l[d] > 0) {
                S[a[d]][b[d]] = w[a[d]] + xk[d] - l[d] * g;
                phi = xk[d] * p[d] + S[a[d]][b[d]];

                System.out.println(phi + " = " + xk[d] + " * " + p[d] + " + (" + w[a[d]] + " + "
                        + xk[d] + " - " + l[d] + " * " + g + ") Из точки " + a[d] +
                        " в точку " + b[d] + " с расстоянием " + l[d]);
                if(d > 0 && b[d - 1] == b[d]) {
                    w[b[d]] = Math.min(w[b[d]], phi);
               } else {
                    w[b[d]] = phi;
                }
            }
        }
        // Алгоритм из N в 0
        for (int d = n - 1; d >= 0; d--) {
            if (l[d] > 0) {
                S[a[d]][b[d]] = w[a[d]] + xk[d] - l[d] *  g;
                phi = xk[d] * p[d] + S[a[d]][b[d]];

                System.out.println(phi + " = " + xk[d] + " * " + p[d] + " + (" + w[b[d]] + " + "
                        + xk[d] + " - " + l[d] + " * " + g + ") Из точки " + b[d] +
                        " в точку " + a[d] + " с расстоянием " + l[d]);
                if (d < n - 1 && a[d + 1] == a[d]) {
                    w[a[d]] = Math.min(w[a[d]], phi);
                } else {
                    w[a[d]] = phi;
                }
            }
        } 
    }
}